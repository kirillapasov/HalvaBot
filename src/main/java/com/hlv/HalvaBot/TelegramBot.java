package com.hlv.HalvaBot;
import com.hlv.HalvaBot.Model.UserState;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.PhotoSize;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.*;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;


//Todo –î–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–∫–∞–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è,
// –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Ä–∞—Å—Å—Ä–æ—á–∫—É, –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î
@Component
@AllArgsConstructor
public class TelegramBot extends TelegramLongPollingBot {
    private final BotConfig botConfig;
    private Map<Long, UserState> userStates = new ConcurrentHashMap<>();
    private Map<Long, Map<String, String>> userData = new  ConcurrentHashMap<>();
    private final ExecutorService executorService = Executors.newCachedThreadPool();


    @Override
    public String getBotUsername() {
        return botConfig.getBotName();
    }

    @Override
    public String getBotToken() {
        return botConfig.getToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage()) {
            Message message = update.getMessage();
            Long chatId = message.getChatId();
            UserState userState = userStates.getOrDefault(chatId, UserState.DEFAULT);


            if (message.hasPhoto() && userState == UserState.AWAITING_DOCUMENT) {
                saveDocumentPhoto(chatId, message);
                userStates.put(chatId, UserState.DEFAULT);
                sendMessageWithKeyboard(chatId, "–ò–¥—ë–º –¥–∞–ª—å—à–µ");
                return;
            }

            if (message.hasText()) {
                String messageText = message.getText();

                switch (messageText) {
                    case "/start" -> startCommandReceived(chatId);

                    case "\uD83D\uDCB8 –û—Å—Ç–∞–≤—å –∑–∞—è–≤–∫—É –Ω–∞ —Ö–∞–ª–≤—É" -> {
                        userStates.put(chatId, UserState.AWAITING_NAME);
                        sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:");
                    }

                    case "\uD83D\uDCB8 –û—Å—Ç–∞–≤—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ" -> {
                        userStates.put(chatId, UserState.AWAITING_NAME_REFINANCE);
                        sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ:");
                    }

                    case "‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –æ —Ö–∞–ª–≤–µ" -> {
                        String HALVAINFO = """
                                –•–∞–ª–≤–∞ –æ—Ç –°–æ–≤–∫–æ–º–±–∞–Ω–∫–∞ ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞, —Å–æ—á–µ—Ç–∞—é—â–∞—è –ª—É—á—à–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–µ–±–µ—Ç–æ–≤–æ–π
                                 –∏ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã.

                                1. –°–≤–æ–∏ –∏ –∑–∞–µ–º–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ: –•—Ä–∞–Ω–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è, –æ–ø–ª–∞—á–∏–≤–∞–π—Ç–µ
                                 –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–µ–º–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö. –í—Å–µ
                                  –≤ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–µ.

                                2. –ü–æ–∫—É–ø–∫–∏ –≤ —Ä–∞—Å—Å—Ä–æ—á–∫—É –±–µ–∑ –ø–µ—Ä–µ–ø–ª–∞—Ç: –í 250,000+ –º–∞–≥–∞–∑–∏–Ω–∞—Ö-–ø–∞—Ä—Ç–Ω–µ—Ä–∞—Ö –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å
                                 —Ç–æ–≤–∞—Ä —á–∞—Å—Ç—è–º–∏, –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤. –°—Ä–æ–∫ —Ä–∞—Å—Å—Ä–æ—á–∫–∏ ‚Äî –¥–æ —Ç—Ä–µ—Ö –ª–µ—Ç, —á—Ç–æ –¥–∞–µ—Ç —Å–≤–æ–±–æ–¥—É –≤ –≤—ã–±–æ—Ä–µ
                                  –∫—Ä—É–ø–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫.

                                3. –î–æ—Ö–æ–¥ –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫ –∏ –∫–µ—à–±—ç–∫: –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∏
                                 –∫–µ—à–±—ç–∫ –∑–∞ –ø–æ–∫—É–ø–∫–∏.

                                4. –ü—Ä–æ—Å—Ç–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ MirPay –¥–ª—è –æ–ø–ª–∞—Ç—ã
                                 —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–º, –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ.

                                –•–∞–ª–≤–∞ ‚Äî –ª—É—á—à–µ–µ –∏–∑ –¥–≤—É—Ö –º–∏—Ä–æ–≤, –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–µ–±–µ—Ç–æ–≤–æ–π –∏ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç –≤ 
                                –æ–¥–Ω–æ–º —É–¥–æ–±–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ. –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ: https://halvacard.ru/cards/main/halva""";

                        sendMessage(chatId, HALVAINFO);
                        sendPhoto(chatId, "C:\\Users\\Kiril\\Desktop\\HalvaBot\\src\\main\\resources\\halva.jpg");
                        sendMessageWithKeyboard(chatId, "–ò–¥—ë–º –¥–∞–ª—å—à–µ");
                    }

                    case "üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É" -> {
                        userStates.put(chatId, UserState.AWAITING_DOCUMENT);
                        sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:");
                    }
                    case "üí≥ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂" -> {
                        userStates.put(chatId, UserState.AWAITING_PAYMENT_AMOUNT);
                        sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏:");
                    }

                    default -> handleUserState(chatId, userState, messageText);
                }
            }
        }
    }

    private void handleUserState(Long chatId, UserState userState, String messageText) {
        switch (userState) {
            case AWAITING_NAME -> {
                saveUserData(chatId, "–§–ò–û", messageText);
                userStates.put(chatId, UserState.AWAITING_PHONE);
                sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:");
            }
            case AWAITING_PHONE -> {
                saveUserData(chatId, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", messageText);
                userStates.put(chatId, UserState.AWAITING_WORKPLACE);
                sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:");
            }
            case AWAITING_WORKPLACE -> {
                saveUserData(chatId, "–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã", messageText);
                userStates.put(chatId, UserState.AWAITING_POSITION);
                sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:");
            }
            case AWAITING_POSITION -> {
                saveUserData(chatId, "–î–æ–ª–∂–Ω–æ—Å—Ç—å", messageText);
                userStates.put(chatId, UserState.AWAITING_MARITAL_STATUS);
                sendMessage(chatId, "–£–∫–∞–∂–∏—Ç–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ (–∂–µ–Ω–∞—Ç/–Ω–µ –∂–µ–Ω–∞—Ç):");
            }
            case AWAITING_MARITAL_STATUS -> {
                saveUserData(chatId, "–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ", messageText);
                userStates.put(chatId, UserState.AWAITING_INCOME);
                sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥:");
            }
            case AWAITING_INCOME -> {
                saveUserData(chatId, "–°—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥", messageText);
                userStates.put(chatId, UserState.AWAITING_CREDIT_LIMIT);
                sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ª–∏–º–∏—Ç —Ä–∞—Å—Å—Ä–æ—á–∫–∏:");
            }
            case AWAITING_CREDIT_LIMIT -> {
                saveUserData(chatId, "–ñ–µ–ª–∞–µ–º—ã–π –ª–∏–º–∏—Ç —Ä–∞—Å—Å—Ä–æ—á–∫–∏", messageText);
                saveDataToFile(chatId);
                userStates.put(chatId, UserState.DEFAULT);
                sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –•–∞–ª–≤—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.");
                sendMessageWithKeyboard(chatId, "–ò–¥—ë–º –¥–∞–ª—å—à–µ");
            }

            case AWAITING_NAME_REFINANCE -> {
                saveUserData(chatId, "–§–ò–û", messageText);
                userStates.put(chatId, UserState.AWAITING_PHONE_REFINANCE);
                sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:");
            }
            case AWAITING_PHONE_REFINANCE -> {
                saveUserData(chatId, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", messageText);
                userStates.put(chatId, UserState.AWAITING_ACCOUNT_NUMBERS);
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–æ–≤ –¥–ª—è —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):");
            }
            case AWAITING_ACCOUNT_NUMBERS -> {
                saveUserData(chatId, "–°—á–µ—Ç–∞ –¥–ª—è —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è", messageText);
                userStates.put(chatId, UserState.AWAITING_REFINANCE_AMOUNT);
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –¥–ª—è —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è:");
            }
            case AWAITING_REFINANCE_AMOUNT -> {
                saveUserData(chatId, "–°—É–º–º–∞ –¥–ª—è —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è", messageText);
                saveDataToFile(chatId);
                userStates.put(chatId, UserState.DEFAULT);
                sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.");
                sendMessageWithKeyboard(chatId, "–ò–¥—ë–º –¥–∞–ª—å—à–µ");
            }
            case AWAITING_PAYMENT_AMOUNT -> {
                saveUserData(chatId, "–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏", messageText);
                userStates.put(chatId, UserState.AWAITING_PAYMENT_MONTHS);
                sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ —Ä–∞—Å—Å—Ä–æ—á–∫–∏:");
            }
            case AWAITING_PAYMENT_MONTHS -> {
                saveUserData(chatId, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤", messageText);
                userStates.put(chatId, UserState.AWAITING_PAYMENT_SUBSCRIPTION);
                sendMessage(chatId, "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø–æ–¥–ø–∏—Å–∫–∞? (–¥–∞/–Ω–µ—Ç):");
            }
            case AWAITING_PAYMENT_SUBSCRIPTION -> {
                saveUserData(chatId, "–ü–æ–¥–ø–∏—Å–∫–∞", messageText);
                userStates.put(chatId, UserState.AWAITING_PAYMENT_SUPER_OPTION);
                sendMessage(chatId, "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å—É–ø–µ—Ä –æ–ø—Ü–∏—è? (–¥–∞/–Ω–µ—Ç):");
            }
            case AWAITING_PAYMENT_SUPER_OPTION -> {
                saveUserData(chatId, "–°—É–ø–µ—Ä –æ–ø—Ü–∏—è", messageText);
                userStates.put(chatId, UserState.AWAITING_PAYMENT_CARD_TYPE);
                sendMessage(chatId, "–ö–∞–∫–æ–π —Ç–∏–ø –∫–∞—Ä—Ç—ã? (–æ–±—ã—á–Ω–∞—è/—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è):");
            }
            case AWAITING_PAYMENT_CARD_TYPE -> {
                saveUserData(chatId, "–¢–∏–ø –∫–∞—Ä—Ç—ã", messageText);
                calculateMonthlyPayment(chatId); // –ü–æ—Å–ª–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö - —Ä–∞—Å—á–µ—Ç
                userStates.put(chatId, UserState.DEFAULT);
            }
            default -> sendMessage(chatId, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start.");
        }
    }

    private void startCommandReceived(Long chatId) {
        String answer = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ," +
                " —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–∞—Ä—Ç—É —Ä–∞—Å—Å—Ä–æ—á–∫–∏ —Ö–∞–ª–≤–∞ –∏–ª–∏ —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ." +
                " –ö—Ä–æ–º–µ —ç—Ç–æ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É";
        sendMessageWithKeyboard(chatId, answer);
    }

    private void sendMessage(Long chatId, String textToSend) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(String.valueOf(chatId));
        sendMessage.setText(textToSend);
        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    private void saveDataToFile(Long chatId) {
        Map<String, String> userApplicationData = userData.get(chatId);
        if (userApplicationData != null) {
            String fileName = "userApplications.txt";
            try (FileWriter writer = new FileWriter(fileName, true)) {
                writer.write("–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Chat ID: " + chatId + "\n");
                userApplicationData.forEach((key, value) -> {
                    try {
                        writer.write(key + ": " + value + "\n");
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                });
                writer.write("\n-----------------\n");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private void saveUserData(Long chatId, String key, String value) {
        userData.computeIfAbsent(chatId, k -> new HashMap<>()).put(key, value);
    }
    private void sendMessageWithKeyboard(Long chatId, String textToSend) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(String.valueOf(chatId));
        sendMessage.setText(textToSend);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        KeyboardRow row2 = new KeyboardRow();
        KeyboardRow row3 = new KeyboardRow();
        row1.add(new KeyboardButton("\uD83D\uDCB8 –û—Å—Ç–∞–≤—å –∑–∞—è–≤–∫—É –Ω–∞ —Ö–∞–ª–≤—É"));
        row1.add(new KeyboardButton("\uD83D\uDCB8 –û—Å—Ç–∞–≤—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ"));
        row2.add(new KeyboardButton("‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –æ —Ö–∞–ª–≤–µ"));
        row2.add(new KeyboardButton("üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"));
        row3.add(new KeyboardButton("\uD83D\uDCB3 –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂"));

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        keyboardMarkup.setKeyboard(keyboard);

        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);

        sendMessage.setReplyMarkup(keyboardMarkup);

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


    private void sendPhoto(Long chatId, String filePath) {
        File imageFile = new File(filePath);
        if (!imageFile.exists()) {
            System.out.println("File not found: " + filePath);
            return;
        }
        InputFile inputFile = new InputFile(imageFile);
        SendPhoto sendPhotoRequest = new SendPhoto();
        sendPhotoRequest.setChatId(String.valueOf(chatId));
        sendPhotoRequest.setPhoto(inputFile);

        try {
            execute(sendPhotoRequest);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void saveDocumentPhoto(Long chatId, Message message) {
        executorService.submit(() -> {
            try {
                List<PhotoSize> photos = message.getPhoto();
                PhotoSize photo = photos.stream()
                        .max(Comparator.comparing(PhotoSize::getFileSize))
                        .orElse(null);

                if (photo == null) {
                    sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.");
                    return;
                }

                String fileId = photo.getFileId();
                org.telegram.telegrambots.meta.api.objects.File file = execute(new GetFile(fileId));
                String filePath = file.getFilePath();

                if (filePath == null || filePath.isEmpty()) {
                    sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.");
                    return;
                }
                System.out.println("File path: " + filePath);

                InputStream fileStream = downloadFileAsStream(file);

                String fileName = "–¥–æ–∫—É–º–µ–Ω—Ç" + chatId + ".jpg";

                java.io.File outputFile = new java.io.File("C:\\Users\\Kiril\\Desktop\\–°–∫–∞–Ω—ã –¥–æ–∫–æ–≤\\" + fileName);
                if (outputFile.exists()) {
                    int counter = 1;
                    while (outputFile.exists()) {
                        String newFileName = fileName.replace(".jpg", " (" + counter + ").jpg");
                        outputFile = new java.io.File("C:\\Users\\Kiril\\Desktop\\–°–∫–∞–Ω—ã –¥–æ–∫–æ–≤\\—Å–∫–∞–Ω" + newFileName);
                        counter++;
                    }
                }

                System.out.println("Saving file to: " + outputFile.getAbsolutePath());

                try (FileOutputStream outputStream = new FileOutputStream(outputFile)) {
                    byte[] buffer = new byte[1024];
                    int bytesRead;
                    while ((bytesRead = fileStream.read(buffer)) != -1) {
                        outputStream.write(buffer, 0, bytesRead);
                    }
                    outputStream.flush();
                    System.out.println("File saved successfully.");
                }

                sendMessage(chatId, "–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.");
            } catch (TelegramApiException | IOException e) {
                e.printStackTrace();
                sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        });
    }
    private void calculateMonthlyPayment(Long chatId) {
        Map<String, String> userApplicationData = userData.get(chatId);

        if (userApplicationData != null) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                double amount = Double.parseDouble(userApplicationData.get("–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏"));
                int months = Integer.parseInt(userApplicationData.get("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤"));
                boolean hasSubscription = "–¥–∞".equalsIgnoreCase(userApplicationData.get("–ü–æ–¥–ø–∏—Å–∫–∞"));
                boolean hasSuperOption = "–¥–∞".equalsIgnoreCase(userApplicationData.get("–°—É–ø–µ—Ä –æ–ø—Ü–∏—è"));
                String cardType = userApplicationData.get("–¢–∏–ø –∫–∞—Ä—Ç—ã");

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—É–ø–µ—Ä –æ–ø—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
                if (hasSuperOption && !hasSubscription) {
                    sendMessage(chatId, "–û—à–∏–±–∫–∞! –°—É–ø–µ—Ä –æ–ø—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.");
                    return;
                }

                // –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å—É–ø–µ—Ä –æ–ø—Ü–∏–∏
                double subscriptionCost = hasSubscription ? 399 : 0;
                double superOptionCost = (hasSuperOption && hasSubscription) ? 399 : 0;

                // –°–∫–∏–¥–∫–∞ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
                if ("—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è".equalsIgnoreCase(cardType)) {
                    subscriptionCost -= 100;
                    superOptionCost -= 100;
                }

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂
                double monthlyPayment = (amount / months) + subscriptionCost + superOptionCost;

                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                sendMessage(chatId, String.format("–í–∞—à –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: %.2f —Ä—É–±.", monthlyPayment));
                sendMessage(chatId, "–ï—Å–ª–∏ –≤—ã –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∞ –∏ —Å—É–ø–µ—Ä –æ–ø—Ü–∏—è –¥–ª—è –≤–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã");
            } catch (NumberFormatException e) {
                sendMessage(chatId, "–û—à–∏–±–∫–∞ –≤ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.");
            }
        } else {
            sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞.");
        }
    }
}
